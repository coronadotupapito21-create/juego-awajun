# -*- coding: utf-8 -*-
import streamlit as st
import unicodedata
import random
from dataclasses import dataclass
import os, glob, re

# =========================
#   CONFIG & ESTILO
# =========================
st.set_page_config(page_title="Awaj√∫n: 4 fotos 1 palabra", page_icon="üåø", layout="centered")

st.markdown("""
<style>
:root{ --jungle:#0d5c49; --leaf:#1f8a70; --lime:#7ed957; --cream:#f6fff5; }
html, body, [data-testid="stAppViewContainer"]{
  background: radial-gradient(1200px 600px at 10% -20%, #e8f7ee 0%, #f6fff5 35%, #ecfff7 60%, #f9fff7 100%);
}
[data-testid="stHeader"] {background-color: rgba(255,255,255,0.0);}
.block-container{padding-top:1.5rem; max-width: 980px;}
h1, h2, h3 { color: var(--jungle) !important; }
.j-card{ background: rgba(255,255,255,0.92); border: 1px solid rgba(13,92,73,.08);
  border-radius: 18px; padding: 14px 18px; box-shadow: 0 10px 28px rgba(13,92,73,.10); }
.j-pill{ background: linear-gradient(90deg, var(--leaf), var(--jungle)); color: white;
  padding: 8px 14px; border-radius: 999px; font-weight:600; display:inline-block; letter-spacing:.2px; }
hr{border-top: 1px dashed rgba(13,92,73,.22);}
.small{opacity:.85; font-size:.9rem;}
</style>
""", unsafe_allow_html=True)

# =========================
#   HELPERS
# =========================
def strip_diacritics(s: str) -> str:
    nf = unicodedata.normalize("NFD", s)
    return "".join(ch for ch in nf if unicodedata.category(ch) != "Mn")

def normalize(s: str, ignore_accents=True) -> str:
    s = s.strip().casefold()
    return strip_diacritics(s) if ignore_accents else s

def slugify_es(word_es: str) -> str:
    """Convierte '√Årbol grande' -> 'arbol-grande' (para nombre de carpeta)."""
    s = strip_diacritics(word_es).lower()
    s = re.sub(r"[^a-z0-9]+", "-", s).strip("-")
    return s

def local_image_paths_for(word_es: str):
    """
    Busca im√°genes locales en images/<slug>/
    Prioriza 1.*, 2.*, 3.*, 4.*; si no, toma cualquier imagen.
    Devuelve hasta 4 rutas; si hay <4, repite para completar 4.
    """
    slug = slugify_es(word_es)
    folder = os.path.join("images", slug)
    if not os.path.isdir(folder):
        return []

    preferred = []
    for i in [1, 2, 3, 4]:
        preferred.extend(sorted(glob.glob(os.path.join(folder, f"{i}.*"))))
    others = []
    if not preferred:
        for ext in ("*.jpg", "*.jpeg", "*.png", "*.webp"):
            others.extend(sorted(glob.glob(os.path.join(folder, ext))))

    files = preferred if preferred else others
    files = files[:4]
    if not files:
        return []

    # Completar hasta 4
    while len(files) < 4:
        files.append(files[-1])
    return files[:4]

@dataclass
class Level:
    es: str   # Espa√±ol (para carpeta y pista)
    aw: str   # Awaj√∫n (respuesta correcta)

    def images(self):
        return local_image_paths_for(self.es)

# =========================
#   VOCABULARIO (80)
# =========================
RAW = [
    ("Agua","Nantak"), ("Sol","Etsa"), ("Luna","Nantu"), ("Estrella","W√°im"),
    ("Fuego","N√©emi"), ("Tierra","Iwanch"), ("Cielo","N√°em"), ("√Årbol","N√∫mi"),
    ("Flor","P√°yam"), ("Hoja","T√°kem"), ("Fr√≠o","Tsets√©k"), ("Calor","S√©kem"),
    ("Viento","P√°kem"), ("Lluvia","Ts√∫gki"), ("R√≠o","Nantakjai"), ("Monta√±a","W√°kan"),
    ("Casa","J√≠i"), ("Cocina","W√°jam"), ("Comida","N√∫un"), ("Yuca","K√∫cha"),
    ("Pl√°tano","P√≠tsa"), ("Ma√≠z","K√∫nki"), ("Pescar","Nampet"), ("Cazar","W√°ju"),
    ("Perro","P√©tsi"), ("Gato","M√≠tsa"), ("P√°jaro","W√≠im"), ("Mono","T√∫ukam"),
    ("Pez","N√°mpet"), ("Serpiente","W√°mpis"), ("Hormiga","T√∫utam"), ("Mariposa","P√°ach"),
    ("√Årbol grande","N√∫mij√°a"), ("Hacha","W√°ncham"), ("Lanza","Ts√°mak"), ("Flecha","P√≠jam"),
    ("Cerbatana","T√∫untam"), ("Cuerda","W√°tsa"), ("Ropa","T√∫jam"), ("Sombrero","W√°ipam"),
    ("Ni√±o","T√∫ujin"), ("Ni√±a","T√∫unam"), ("Hombre","A√©ntsa"), ("Mujer","N√∫wa"),
    ("Hermano","W√°ajin"), ("Hermana","W√°ajum"), ("Abuelo","Apachum"), ("Abuela","Apatum"),
    ("Madre","N√∫wam"), ("Padre","A√©ntsam"), ("Fuerte","K√°kajam"), ("D√©bil","N√∫tsam"),
    ("Grande","W√°jam"), ("Peque√±o","T√≠jam"), ("Alto","N√°tkam"), ("Bajo","W√°atsam"),
    ("Gordo","W√°tsum"), ("Delgado","N√°tsum"), ("Blanco","Ts√°am"), ("Negro","W√°ampam"),
    ("Verde","N√∫kam"), ("Rojo","W√°inam"), ("Amarillo","T√∫mpam"), ("Azul","P√°tkam"),
    ("Fruta","P√≠kam"), ("Arena","Ts√°amaj"), ("Roca","P√°tam"), ("Camino","N√°im"),
    ("Trabajo","W√°jamum"), ("Cantar","P√°tsuk"), ("Bailar","N√∫jain"), ("Dormir","T√°kam"),
    ("Beber","N√°ajum"), ("Ver","W√°jeem"), ("Escuchar","Ts√°itum"), ("Hablar","N√∫kamun"),
]
LEVELS = [Level(es=es, aw=aw) for es, aw in RAW]

# =========================
#   ESTADO
# =========================
ss = st.session_state
if "order" not in ss:
    ss.order = list(range(len(LEVELS)))
    random.shuffle(ss.order)
if "idx" not in ss:
    ss.idx = 0
if "score" not in ss:
    ss.score = 0
if "reveal" not in ss:
    ss.reveal = False
if "choice" not in ss:
    ss.choice = None

# =========================
#   UI
# =========================
st.markdown('<div class="j-pill">Awaj√∫n ¬∑ 4 fotos 1 palabra</div>', unsafe_allow_html=True)
st.title("üåø Aprende Awaj√∫n jugando")

colL, colR = st.columns([2,1])
with colL:
    st.markdown('<div class="j-card">', unsafe_allow_html=True)
    st.write("**Puntaje:**", ss.score)
    st.write("**Nivel:**", ss.idx + 1, "/", len(LEVELS))
    st.markdown('</div>', unsafe_allow_html=True)
with colR:
    opt = st.selectbox("Comparaci√≥n", ["Flexible (ignora acentos)", "Estricta"], index=0)
    ignore_accents = (opt == "Flexible (ignora acentos)")

st.markdown("---")

# ===== Nivel actual =====
k = ss.order[ss.idx]
lvl = LEVELS[k]
paths = lvl.images()

c1, c2 = st.columns(2)

def show(col, path):
    if path and os.path.exists(path):
        col.image(path, use_container_width=True)
    else:
        col.warning("üñºÔ∏è Falta imagen local. Sube a `images/{}/1..4.jpg`."
                    .format(slugify_es(lvl.es)))

if paths:
    show(c1, paths[0]); show(c2, paths[1] if len(paths)>1 else None)
    show(c1, paths[2] if len(paths)>2 else None); show(c2, paths[3] if len(paths)>3 else None)
else:
    st.error(f"No encontr√© im√°genes en `images/{slugify_es(lvl.es)}/`. "
             f"Sube 1-4 archivos .jpg/.png/.webp con nombres 1,2,3,4.")

# ===== Alternativas (3) =====
all_aw = [aw for _, aw in RAW]
wrong = random.sample([aw for aw in all_aw if aw != lvl.aw], 2)
options = [lvl.aw] + wrong
random.shuffle(options)

st.markdown("### ‚úçÔ∏è Elige la palabra correcta (Awaj√∫n):")
ss.choice = st.radio(
    label="alternativas",
    options=options,
    index=None,
    label_visibility="collapsed",
    key=f"choice_{ss.idx}",
)

b1, b2, b3, b4 = st.columns(4)
check = b1.button("Comprobar ‚úÖ", use_container_width=True)
hint  = b2.button("Pista üí°", use_container_width=True)
skip  = b3.button("Saltar ‚è≠Ô∏è", use_container_width=True)
nextB = b4.button("Siguiente ‚ñ∂Ô∏è", use_container_width=True)

if hint:
    ss.reveal = True

if check:
    if ss.choice is None:
        st.warning("Selecciona una alternativa antes de comprobar.")
    else:
        if normalize(ss.choice, ignore_accents) == normalize(lvl.aw, ignore_accents):
            st.success("‚úÖ ¬°Correcto!")
            ss.score += 10
            ss.idx = (ss.idx + 1) % len(LEVELS)
            ss.reveal = False
            st.rerun()
        else:
            st.error("‚ùå Incorrecto, ¬°int√©ntalo otra vez!")

if skip or nextB:
    ss.idx = (ss.idx + 1) % len(LEVELS)
    ss.reveal = False
    st.rerun()

if ss.reveal:
    st.info(f"üí° **Pista**: Espa√±ol ‚Üí **{lvl.es}**")

st.markdown("---")
st.caption("Coloca tus im√°genes en /images/<palabra>/1..4.jpg (min√∫sculas, sin acentos). Ej: images/yuca/1.jpg")











